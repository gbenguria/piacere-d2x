# Reference documentation https://docs.docker.com/compose/environment-variables/
# Focus default variables as production, to allow direct download and run in production
# Required external variables that must be defined externally are those that have no value

#### Environments managed
# this is the default environment if needed uncomment and adjust
# some conventions on environment prefixes
# - _ENV_LOCAL_ .env.local purpouse is to cache build and start the setup locally using cache images exposing dev ports (i.e 3306, 5432, 8086, ...) for debug and development purposes. It is the default behaviour (_ENV_LOCAL_:build-cache:.env.local)
# - _ENV_CACHE_ .env.cache purpouse is to generate images tagged for build cache from that use BUILDKIT_INLINE_CACHE 1 (_ENV_CACHE_:build-cache:.env.cache)
# - _ENV_RELEASE_ .env.release purpouse is to generate images (that do not use BUILDKIT_INLINE_CACHE 1) tagged for the clients/pilots usage (_ENV_RELEASE_:build-release:.env.release)
# - _ENV_DEPLOY_ .env purpose is to generate non building docker-compose that uses the release to deploy on generic client (_ENV_DEPLOY_:release:.env)
# - _ENV_TEST_ .env.test the purpouse is to test from the cache images the correct behaviour without exposing ports (_ENV_TEST_:build-cache:.env.test)
# types of building
# - build-cache: it focuses in the generation of images with BUILDKIT_INLINE_CACHE 1 for its usage in the cache-from for subsequent build, for each compose-file in compose-file build it finds build/cache the same name to add it to the build, it will use cache from.
# - build-release: it focuses in the generation of images for distribution it avoid using BUILDKIT_INLINE_CACHE 1 to reduce the size, it will use cache from.
# - cache: it runs using cache images
# - release: it runs using release images
# default enviroment 
# _ENVIRONMENTS=_ENV_LOCAL_:build-cache:.env.local
# to add more enviroments use split with ";"
 _ENVIRONMENTS=_ENV_LOCAL_:build-cache:.env.local;_ENV_DEPLOY_:release:.env;_ENV_RELEASE_:build-release:.env.release;_ENV_PIACERE_:release:.env.piacere;_ENV_RELEASEPIACERE_:release:.env.releasepiacere

#### Common image related ####
DOCKER_REGISTRY_CACHE_PREFIX=cache.euve.digital.tecnalia.dev:5000
DOCKER_REGISTRY_CACHE_VERSION=latest

#### Common Build related ####
# DOCKER_BUILDKIT and COMPOSE_DOCKER_CLI_BUILD do not have effect here, we leave them as documentation
# DOCKER_BUILDKIT=1
# COMPOSE_DOCKER_CLI_BUILD=1

### Common Traefik related ###
TRAEFIK_NETWORK_NAME=traefik_network
TRAEFIK_HTTPS_ENTRYPOINT_NAME=websecure
TRAEFIK_HTTP_ENTRYPOINT_NAME=web

#### Common Production related ####
ADMIN_USER=admin
ADMIN_PASSWORD=projectPassword
# to calculate password hash `openssl passwd -apr1 $ADMIN_PASSWORD`
# ADMIN_PASSWORD_HASH='$apr1$chTuJ7f9$.Ul8E16QYHtydKw.ehzZC.'
# to calculate password bcrypt hash `sudo apt-get update; sudo apt-get install -y apache2-utils; htpasswd -bnBC 12 "" $ADMIN_PASSWORD | tr -d ':\n'`
# ADMIN_PASSWORD_BCRYPT_HASH='$2y$12$NxJ.FkLgDZWWjc15y9bhX./GOTp67krCxWPanJLyCjofKyIN.zS96'
# HTTPS_PORT must be 443 if you use step-ca
HTTPS_PORT=443
# server host is configured during the sync based on _ENV_LOCAL_ and _ENV_DEPLOY, _ENV_LOCAL_ will be used for test and release unless _ENV_RELEASE_ or _ENV_TEST_ specified
# SERVER_HOST=project.org
SERVER_HOST=ci.piacere.digital.tecnalia.dev

#### Platform Specific ####
# TZ=Madrid

#### Common docker-compose related ####
# https://docs.docker.com/compose/reference/envvars/#compose_file#compose_project_name
# these are docker-compose related environment variables
COMPOSE_PROJECT_NAME=piacere-d2x-production
# _ENV_LOCAL_COMPOSE_FILE_BASE= # These are oriented for local vagrant usually it contains local traefik configuration, dev services, etc
# _ENV_RELEASE_COMPOSE_FILE_BASE= # These are oriented for tagging relevant images for upload to official release repositories
# _ENV_DEPLOY_COMPOSE_FILE_BASE= # These are oriented for final deployment it contains production traefik configuration, etc
# _ENV_TEST_COMPOSE_FILE_BASE= # These are oriented for testing
# COMPOSE_FILE_BASE= # (MANDATORY) These are those main services of the project, that will apply to all the scenarios

COMPOSE_FILE_BASE=docker-compose.yaml
COMPOSE_FILE_BASE_TRAEFIK_NETWORK=docker-compose-traefik-network-external.yaml
COMPOSE_FILE= 
# COMPOSE_FILE Is generated automatically
D2X_BASE_PATH=../

IMAGE_D2X=optima-piacere-docker-dev.artifact.tecnalia.com/wp3/d2x:y3
IMAGE_D2X_CACHE=optima-piacere-docker-dev.artifact.tecnalia.com/wp3/d2x:y3

_ENV_LOCAL_SERVER_HOST=192.168.56.1.nip.io

_ENV_RELEASE_COMPOSE_FILE_BASE_TRAEFIK_NETWORK=docker-compose-traefik-network-internal.yaml
_ENV_RELEASE_COMPOSE_FILE_BASE_ARTIFACTORY=docker-compose-artifactory.yaml

# we create piacere as a release, no as a build-release, and we add the piacere build and release to the compose file explicitly
_ENV_PIACERE_COMPOSE_FILE_BASE_PIACERE_BUILD=piacere-build/docker-compose.yaml
_ENV_PIACERE_COMPOSE_FILE_BASE_PIACERE_RELEASE=release/docker-compose.yaml
_ENV_PIACERE_COMPOSE_FILE_BASE_ARTIFACTORY=docker-compose-artifactory.yaml
_ENV_PIACERE_COMPOSE_FILE_BASE_TRAEFIK_NETWORK=docker-compose-traefik-network-internal.yaml

# we create releasepiacere as a release, no as a build-release, and we add the piacere build and release to the compose file explicitly
_ENV_RELEASEPIACERE_COMPOSE_FILE_BASE_PIACERE_BUILD=piacere-build/docker-compose.yaml
_ENV_RELEASEPIACERE_COMPOSE_FILE_BASE_PIACERE_RELEASE=release/docker-compose.yaml
_ENV_RELEASEPIACERE_COMPOSE_FILE_BASE_ARTIFACTORY=docker-compose-artifactory.yaml
_ENV_RELEASEPIACERE_COMPOSE_FILE_BASE_TRAEFIK_NETWORK=docker-compose-traefik-network-internal.yaml
